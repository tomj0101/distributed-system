/**
 * Status entity
 * @author Tom
 * Changes:
 * Created on 2021-06-19 14:01  - by Tom
 */
entity Status {
    id Long
	name String  minlength(1) maxlength(500) required
	description String minlength(1) maxlength(500) required
	registerDate Instant
}

/**
 * Address entity.
 * @author Tom
 * Changes:
 * Created on 2021-06-19 14:01  - by Tom
 */
entity Address {
    id Long
	streetAddress String minlength(1) maxlength(500) required
	postalCode Integer required
	city String minlength(1) maxlength(200) required
	stateProvince String minlength(1) maxlength(200) required

}


/**
 * Product entity.
 * @author Tom
 * Changes:
 * Created on 2021-06-19 14:01  - by Tom
 */
entity Product {
    id Long
	name String minlength(1) maxlength(250) required
	description TextBlob
	productImages ImageBlob
    price Double
    condition Condition
	active Boolean
    registerDate Instant
}


/**
 * Order entity. Master
 * @author Tom
 * Changes:
 * Created on 2021-06-19 14:01  - by Tom 
 */
entity OrderMaster {
    id Long
	paymentMethod String //VISA****0102
	total Double
	//wishlistId UUID
	email String minlength(1) maxlength(500) required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
    registerDate Instant

}

/**
 * Order entity. Detail
 * @author Tom
 * Changes:
 * Created on 2021-06-19 14:01  - by Tom 
   Is not in use, code is there for sample but not really in used.
 */
 entity OrderDetails{
	 id Long
	 userId Long
     registerDate Instant
 }

/**
 * Condition enum.
 * @author Tom
 * Changes:
 * Created on 2021-06-19 14:01  - by Tom 
 */
enum Condition {
    NEW, USED
}


/**
 * Relationship
 */
relationship OneToOne {
	//### OrderMaster ####
	OrderMaster{address(streetAddress)} to Address
    OrderMaster{status(name)} to Status

	//### OrderDetails ####
	OrderDetails{OrderMaster(id)} to OrderMaster  //Array OrderMaster.orderDetails[]	
	
	//### Address ####
	Address{User} to User
}

/*
relationship OneToMany{
	
	OrderDetails{User} to User
	OrderDetails{Product(name)} to Product        //Array OrderDetails.product[]
}*/


relationship ManyToOne{
	OrderMaster to User //this is the same as OrderMaster{User} to User
}


/**
 * Paginate and Service
 */
paginate OrderDetails with infinite-scroll
paginate Product, Address, OrderMaster with pagination
service all with serviceImpl